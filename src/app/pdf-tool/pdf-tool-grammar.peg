---
import { PDFUtil } from './pdf-util';
import { PDFDocument } from 'pdf-lib';
---

start       := expr=expression $
               .doc = Promise<PDFDocument>  { 
                                              return expr.doc; 
                                            }

expression  := fgroup=fileGroup ':' pgroup=pageGroup ',' expr=expression 
               .doc = Promise<PDFDocument>  { 
                                              return PDFUtil.concat(PDFUtil.pickPagesCollapse(fgroup.docs, pgroup.pages), expr.doc); 
                                            }
             | fgroup=fileGroup ':' pgroup=pageGroup 
               .doc = Promise<PDFDocument>  { 
                                              return PDFUtil.pickPagesCollapse(fgroup.docs, pgroup.pages);
                                            }
             | group=fileGroup ',' expr=expression 
               .doc = Promise<PDFDocument>  { 
                                              return PDFUtil.concat(PDFUtil.collapse(group.docs), expr.doc);
                                            }
             | group=fileGroup
               .doc = Promise<PDFDocument>  { 
                                              return PDFUtil.collapse(group.docs);
                                            }

pageGroup   := '\(' list=pageList '\)'
               .pages = number[]            { 
                                              return list.pages; 
                                            }
pageList    := p=page ',' list=pageList 
               .pages = number[]            { 
                                              return [p.page].concat(list.pages); 
                                            }
             | left=page '~' right=page
               .pages = number[]            {
                                              return PDFUtil.range(left.page, right.page);
                                            }
             | p=page
               .pages = number[]            { 
                                              return [p.page]; 
                                            }
page        := id=num
               .page = number               { 
                                              return id.value; 
                                            }

fileGroup   := '\(' list=fileList '\)'
               .docs = Promise<PDFDocument>[] { 
                                                return list.docs; 
                                              }
fileList    := left=file ',' right=fileList 
               .docs = Promise<PDFDocument>[] { 
                                                return [left.doc].concat(right.docs); 
                                              }
             | f=file
               .docs = Promise<PDFDocument>[] { 
                                                return [f.doc]; 
                                              } 
file        := id=num                             
               .doc = Promise<PDFDocument>  { 
                                              return PDFUtil.identity(id.value); 
                                            }

num         := val='[0-9]+'
               .value = number              { 
                                              return parseInt(val); 
                                            }

// This rule matches any whitespace
_    := '\s*'