/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { PDFUtil } from './pdf-util';
* import { PDFDocument } from 'pdf-lib';
* ---
* start       := expr=expression $
*                .doc = Promise<PDFDocument>  { 
*                                               return expr.doc; 
*                                             }
* expression  := fgroup=fileGroup ':' pgroup=pageGroup ',' expr=expression 
*                .doc = Promise<PDFDocument>  { 
*                                               return PDFUtil.concat(PDFUtil.pickPages(fgroup.doc, pgroup.pages), expr.doc); 
*                                             }
*              | fgroup=fileGroup ':' pgroup=pageGroup 
*                .doc = Promise<PDFDocument>  { 
*                                               return PDFUtil.pickPages(fgroup.doc, pgroup.pages); 
*                                             }
*              | group=fileGroup ',' expr=expression 
*                .doc = Promise<PDFDocument>  { 
*                                               return PDFUtil.concat(group.doc, expr.doc); 
*                                             }
*              | group=fileGroup
*                .doc = Promise<PDFDocument>  { 
*                                               return group.doc; 
*                                             }
* pageGroup   := '\(' list=pageList '\)'
*                .pages = number[]  { 
*                                     return list.pages; 
*                                   }
* pageList    := p=page ',' list=pageList 
*                .pages = number[]  { 
*                                     return [p.page].concat(list.pages); 
*                                   }
*              | p=page
*                .pages = number[]  { 
*                                     return [p.page]; 
*                                   }
* page        := id=num
*                .page = number     { 
*                                     return id.value; 
*                                   }
* fileGroup   := '\(' list=fileList '\)'
*                .doc = Promise<PDFDocument>  { 
*                                               return list.doc; 
*                                             }
* fileList    := left=file ',' right=fileList 
*                .doc = Promise<PDFDocument>  { 
*                                               return PDFUtil.concat(left.doc, right.doc); 
*                                             }
*              | left=file
*                .doc = Promise<PDFDocument>  { 
*                                               return left.doc; 
*                                             } 
* file        := id=num                             
*                .doc = Promise<PDFDocument>  { 
*                                               return PDFUtil.identity(id.value); 
*                                             }
* num         := val='[0-9]+'
*                .value = number { return parseInt(val); }
*/

import { PDFUtil } from './pdf-util';
import { PDFDocument } from 'pdf-lib';

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    expression_1 = "expression_1",
    expression_2 = "expression_2",
    expression_3 = "expression_3",
    expression_4 = "expression_4",
    pageGroup = "pageGroup",
    pageList_1 = "pageList_1",
    pageList_2 = "pageList_2",
    page = "page",
    fileGroup = "fileGroup",
    fileList_1 = "fileList_1",
    fileList_2 = "fileList_2",
    file = "file",
    num = "num",
    $EOF = "$EOF",
}
export class start {
    public kind: ASTKinds.start = ASTKinds.start;
    public expr: expression;
    public doc: Promise<PDFDocument>;
    constructor(expr: expression){
        this.expr = expr;
        this.doc = ((): Promise<PDFDocument> => {
        return expr.doc;
        })();
    }
}
export type expression = expression_1 | expression_2 | expression_3 | expression_4;
export class expression_1 {
    public kind: ASTKinds.expression_1 = ASTKinds.expression_1;
    public fgroup: fileGroup;
    public pgroup: pageGroup;
    public expr: expression;
    public doc: Promise<PDFDocument>;
    constructor(fgroup: fileGroup, pgroup: pageGroup, expr: expression){
        this.fgroup = fgroup;
        this.pgroup = pgroup;
        this.expr = expr;
        this.doc = ((): Promise<PDFDocument> => {
        return PDFUtil.concat(PDFUtil.pickPages(fgroup.doc, pgroup.pages), expr.doc);
        })();
    }
}
export class expression_2 {
    public kind: ASTKinds.expression_2 = ASTKinds.expression_2;
    public fgroup: fileGroup;
    public pgroup: pageGroup;
    public doc: Promise<PDFDocument>;
    constructor(fgroup: fileGroup, pgroup: pageGroup){
        this.fgroup = fgroup;
        this.pgroup = pgroup;
        this.doc = ((): Promise<PDFDocument> => {
        return PDFUtil.pickPages(fgroup.doc, pgroup.pages);
        })();
    }
}
export class expression_3 {
    public kind: ASTKinds.expression_3 = ASTKinds.expression_3;
    public group: fileGroup;
    public expr: expression;
    public doc: Promise<PDFDocument>;
    constructor(group: fileGroup, expr: expression){
        this.group = group;
        this.expr = expr;
        this.doc = ((): Promise<PDFDocument> => {
        return PDFUtil.concat(group.doc, expr.doc);
        })();
    }
}
export class expression_4 {
    public kind: ASTKinds.expression_4 = ASTKinds.expression_4;
    public group: fileGroup;
    public doc: Promise<PDFDocument>;
    constructor(group: fileGroup){
        this.group = group;
        this.doc = ((): Promise<PDFDocument> => {
        return group.doc;
        })();
    }
}
export class pageGroup {
    public kind: ASTKinds.pageGroup = ASTKinds.pageGroup;
    public list: pageList;
    public pages: number[];
    constructor(list: pageList){
        this.list = list;
        this.pages = ((): number[] => {
        return list.pages;
        })();
    }
}
export type pageList = pageList_1 | pageList_2;
export class pageList_1 {
    public kind: ASTKinds.pageList_1 = ASTKinds.pageList_1;
    public p: page;
    public list: pageList;
    public pages: number[];
    constructor(p: page, list: pageList){
        this.p = p;
        this.list = list;
        this.pages = ((): number[] => {
        return [p.page].concat(list.pages);
        })();
    }
}
export class pageList_2 {
    public kind: ASTKinds.pageList_2 = ASTKinds.pageList_2;
    public p: page;
    public pages: number[];
    constructor(p: page){
        this.p = p;
        this.pages = ((): number[] => {
        return [p.page];
        })();
    }
}
export class page {
    public kind: ASTKinds.page = ASTKinds.page;
    public id: num;
    public page: number;
    constructor(id: num){
        this.id = id;
        this.page = ((): number => {
        return id.value;
        })();
    }
}
export class fileGroup {
    public kind: ASTKinds.fileGroup = ASTKinds.fileGroup;
    public list: fileList;
    public doc: Promise<PDFDocument>;
    constructor(list: fileList){
        this.list = list;
        this.doc = ((): Promise<PDFDocument> => {
        return list.doc;
        })();
    }
}
export type fileList = fileList_1 | fileList_2;
export class fileList_1 {
    public kind: ASTKinds.fileList_1 = ASTKinds.fileList_1;
    public left: file;
    public right: fileList;
    public doc: Promise<PDFDocument>;
    constructor(left: file, right: fileList){
        this.left = left;
        this.right = right;
        this.doc = ((): Promise<PDFDocument> => {
        return PDFUtil.concat(left.doc, right.doc);
        })();
    }
}
export class fileList_2 {
    public kind: ASTKinds.fileList_2 = ASTKinds.fileList_2;
    public left: file;
    public doc: Promise<PDFDocument>;
    constructor(left: file){
        this.left = left;
        this.doc = ((): Promise<PDFDocument> => {
        return left.doc;
        })();
    }
}
export class file {
    public kind: ASTKinds.file = ASTKinds.file;
    public id: num;
    public doc: Promise<PDFDocument>;
    constructor(id: num){
        this.id = id;
        this.doc = ((): Promise<PDFDocument> => {
        return PDFUtil.identity(id.value);
        })();
    }
}
export class num {
    public kind: ASTKinds.num = ASTKinds.num;
    public val: string;
    public value: number;
    constructor(val: string){
        this.val = val;
        this.value = ((): number => {
        return parseInt(val);
        })();
    }
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$expr: Nullable<expression>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$expr = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = new start($scope$expr);
                }
                return $$res;
            });
    }
    public matchexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<expression> {
        return this.choice<expression>([
            () => this.matchexpression_1($$dpth + 1, $$cr),
            () => this.matchexpression_2($$dpth + 1, $$cr),
            () => this.matchexpression_3($$dpth + 1, $$cr),
            () => this.matchexpression_4($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_1> {
        return this.run<expression_1>($$dpth,
            () => {
                let $scope$fgroup: Nullable<fileGroup>;
                let $scope$pgroup: Nullable<pageGroup>;
                let $scope$expr: Nullable<expression>;
                let $$res: Nullable<expression_1> = null;
                if (true
                    && ($scope$fgroup = this.matchfileGroup($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$pgroup = this.matchpageGroup($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new expression_1($scope$fgroup, $scope$pgroup, $scope$expr);
                }
                return $$res;
            });
    }
    public matchexpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_2> {
        return this.run<expression_2>($$dpth,
            () => {
                let $scope$fgroup: Nullable<fileGroup>;
                let $scope$pgroup: Nullable<pageGroup>;
                let $$res: Nullable<expression_2> = null;
                if (true
                    && ($scope$fgroup = this.matchfileGroup($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$pgroup = this.matchpageGroup($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new expression_2($scope$fgroup, $scope$pgroup);
                }
                return $$res;
            });
    }
    public matchexpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_3> {
        return this.run<expression_3>($$dpth,
            () => {
                let $scope$group: Nullable<fileGroup>;
                let $scope$expr: Nullable<expression>;
                let $$res: Nullable<expression_3> = null;
                if (true
                    && ($scope$group = this.matchfileGroup($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new expression_3($scope$group, $scope$expr);
                }
                return $$res;
            });
    }
    public matchexpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_4> {
        return this.run<expression_4>($$dpth,
            () => {
                let $scope$group: Nullable<fileGroup>;
                let $$res: Nullable<expression_4> = null;
                if (true
                    && ($scope$group = this.matchfileGroup($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new expression_4($scope$group);
                }
                return $$res;
            });
    }
    public matchpageGroup($$dpth: number, $$cr?: ErrorTracker): Nullable<pageGroup> {
        return this.run<pageGroup>($$dpth,
            () => {
                let $scope$list: Nullable<pageList>;
                let $$res: Nullable<pageGroup> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$list = this.matchpageList($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new pageGroup($scope$list);
                }
                return $$res;
            });
    }
    public matchpageList($$dpth: number, $$cr?: ErrorTracker): Nullable<pageList> {
        return this.choice<pageList>([
            () => this.matchpageList_1($$dpth + 1, $$cr),
            () => this.matchpageList_2($$dpth + 1, $$cr),
        ]);
    }
    public matchpageList_1($$dpth: number, $$cr?: ErrorTracker): Nullable<pageList_1> {
        return this.run<pageList_1>($$dpth,
            () => {
                let $scope$p: Nullable<page>;
                let $scope$list: Nullable<pageList>;
                let $$res: Nullable<pageList_1> = null;
                if (true
                    && ($scope$p = this.matchpage($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$list = this.matchpageList($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new pageList_1($scope$p, $scope$list);
                }
                return $$res;
            });
    }
    public matchpageList_2($$dpth: number, $$cr?: ErrorTracker): Nullable<pageList_2> {
        return this.run<pageList_2>($$dpth,
            () => {
                let $scope$p: Nullable<page>;
                let $$res: Nullable<pageList_2> = null;
                if (true
                    && ($scope$p = this.matchpage($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new pageList_2($scope$p);
                }
                return $$res;
            });
    }
    public matchpage($$dpth: number, $$cr?: ErrorTracker): Nullable<page> {
        return this.run<page>($$dpth,
            () => {
                let $scope$id: Nullable<num>;
                let $$res: Nullable<page> = null;
                if (true
                    && ($scope$id = this.matchnum($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new page($scope$id);
                }
                return $$res;
            });
    }
    public matchfileGroup($$dpth: number, $$cr?: ErrorTracker): Nullable<fileGroup> {
        return this.run<fileGroup>($$dpth,
            () => {
                let $scope$list: Nullable<fileList>;
                let $$res: Nullable<fileGroup> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$list = this.matchfileList($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new fileGroup($scope$list);
                }
                return $$res;
            });
    }
    public matchfileList($$dpth: number, $$cr?: ErrorTracker): Nullable<fileList> {
        return this.choice<fileList>([
            () => this.matchfileList_1($$dpth + 1, $$cr),
            () => this.matchfileList_2($$dpth + 1, $$cr),
        ]);
    }
    public matchfileList_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fileList_1> {
        return this.run<fileList_1>($$dpth,
            () => {
                let $scope$left: Nullable<file>;
                let $scope$right: Nullable<fileList>;
                let $$res: Nullable<fileList_1> = null;
                if (true
                    && ($scope$left = this.matchfile($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchfileList($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new fileList_1($scope$left, $scope$right);
                }
                return $$res;
            });
    }
    public matchfileList_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fileList_2> {
        return this.run<fileList_2>($$dpth,
            () => {
                let $scope$left: Nullable<file>;
                let $$res: Nullable<fileList_2> = null;
                if (true
                    && ($scope$left = this.matchfile($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new fileList_2($scope$left);
                }
                return $$res;
            });
    }
    public matchfile($$dpth: number, $$cr?: ErrorTracker): Nullable<file> {
        return this.run<file>($$dpth,
            () => {
                let $scope$id: Nullable<num>;
                let $$res: Nullable<file> = null;
                if (true
                    && ($scope$id = this.matchnum($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new file($scope$id);
                }
                return $$res;
            });
    }
    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
        return this.run<num>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<num> = null;
                if (true
                    && ($scope$val = this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new num($scope$val);
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}